import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database import add_user
from database import format_active_players, delete_user_by_id

class Registration(StatesGroup):
    waiting_for_name = State()

router = Router()

@router.message(F.text == "/start")
async def cmd_start(msg: Message, state: FSMContext):
    await delete_user_by_id(msg.from_user.id)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–æ–¥–Ω–æ —Å–ª–æ–≤–æ, –¥–æ 11 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(Registration.waiting_for_name)

@router.message(Registration.waiting_for_name)
async def set_name(msg: Message, state: FSMContext):
    name = msg.text.strip()
    if ' ' in name or len(name) > 11 or not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø]+$', name):
        await msg.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏ –∫–æ—Ä–æ—á–µ 11 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—à–µ–ª –Ω–∞—Ö—É–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        return
    if await add_user(msg.from_user.id, name, msg.chat.id):
        await msg.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –¢—ã –≤ –ø—É–ª–µ –∏–≥—Ä–æ–∫–æ–≤.")
        await state.clear()
    else:
        await msg.answer("–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ—à–µ–ª –Ω–∞—Ö—É–π, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ!")


@router.message(F.text == "/players")
async def show_players(msg: Message):
    text = await format_active_players()
    await msg.answer(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{text}")
